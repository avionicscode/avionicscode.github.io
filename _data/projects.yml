- name: Visual Question Answering
  github: IAmS4n/Visual-Question-Answering
  image: /images/vqa_logo.png
  description: |
    Investigation on [VQA dataset](https://visualqa.org/vqa_v1_download.html).
    **TensorFlow** is utilized to implement a solution based on CNN and LSTM architectures plus some ideas such as Attention and Positional features.

- name: Matrix Factorization
  github: IAmS4n/Matrix-Factorization
  image: /images/PGM.png
  description: |
    Finding of the missed values in the adjacency matrix of a big undirected weighted graph using **probabilistic graphical models**.
    The adjacency matrix's values were modeled with Poisson distribution and Gamma prior.
    Three approaches were investigated for solving the problem, including the **EM algorithm**, **Variational Inference**, and **Gibbs sampling** method.
    I have experienced calculation and parallel implementation of these methods.

#- name: Liver Segmentation
#  image: /images/liver.png
#  description: |
#    Segmentation of liver and liver lesions by 3D U-Net.
#    I participated in a project dealing with liver and liver lesion segmentation using the 3D U-Net model over MRI images.
#
- name: Brain EEG Signal
  image: /images/brain.png
  description: |
    Different ML models are tested on the EEG signal to recognize some actions from the brain.
    Features are extracted from the frequency spectrogram, and it turns out Random Forest is the best model.
    The implementation utilizes **Scikit-Learn**.

- name: Vision-based 360-degree Robot
  youtube_video: ZQ_D5UqUvxY
  description: |
    Design and construction of a mobile robot with the ability to move to specific points on a board.

    I used a machine vision (**OpenCV** library) for navigation, Bluetooth technology for communication, and **OpenMP** library to enhance the routing algorithms' performance.
    The programming language used in this project was **C++**.

    As you can see in the video, there is a fixed camera above the robot.
    The camera is connected to a computer and the position and angle of the robot are detected based on the robot's marker pattern.
    The computer wirelessly sends commands which describe the PWM rate and working time for each of four motors.
    The robot uses an **AVR microcontroller** for the execution of these commands.

- name: Privacy-focused DICOM web panel
  github: IAmS4n/CTLabeling
  image: /images/ct_panel_demo.png
  description: |
    The web system is developed based on the **Flask framework** for the easy labeling of DICOM images with Privacy protection.
    The system is used for connecting to an AI system.
    Also, the system is prepared for use in an **Active Learning scenario**.

- name: English with Movie
  github: IAmS4n/English_with_Movie
  image: /images/lang.png
  description: |
    A web-based video player to leverage movies for practicing language skills.
    There is a demo for Persian speakers in [this link](https://iams4n.github.io/English_with_Movie/).
    The player gets a movie with two language subtitles, then it plays video dialog by dialog with an automatic pause and shows two subtitles simultaneously.
    It has some combinations of different modes for practicing different skills.
    The listening part is based on hiding the subtitles and normal play of the video.
    The speaking part is based on showing just subtitle that is related to native language and muting the video.
    **JavaScript** is the language that I used for the interface and **python** for the backend.

#- name: Ink Saver
#  image: /images/ink_saver.jpg
#  description: |
#    A tool to simplify slides and document images for saving the ink of the printers.
#    **OpenCV** and **Scikit-Image** libraries are utilized for image processing and the **Flask framework** for the interface.
#    I solved the problem of slides' background by considering slides as a video and using the video background removal techniques.
#
- name: Dynamic Skyline Problem
  github: IAmS4n/MEMOCODE2015-IPM
  image: /images/skyline.png
  description: |
    Design and implementation of a high-performance and distributed solution to the Dynamic Skyline Problem.
    The most important part of the implementation is using **data structures** such as the RedBlack tree.
    The implementation utilizes **C++** and **OpenMP** library.

- name: MIPS CPU with Pipeline
  github: IAmS4n/MIPS-CPU-VHDL
  image: /images/mips.jpg
  description: |
    A MIPS CPU with Pipeline which is described in Patterson's book, is simulated using **VHDL**.
    Also, an **assembler** is developed for testing the CPU.
